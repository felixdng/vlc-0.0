/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Tue Mar 20 14:40:17 2018. */

#ifndef PB_SEARCHACTIONBYNAME_PB_H_INCLUDED
#define PB_SEARCHACTIONBYNAME_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _SearchActionByNameReq {
    char name[200];
/* @@protoc_insertion_point(struct:SearchActionByNameReq) */
} SearchActionByNameReq;

typedef struct _SearchActionByNameResp {
    char action_id[200];
    char action_name[200];
    int64_t execute_order;
    int64_t execute_time;
    char arguments[200];
/* @@protoc_insertion_point(struct:SearchActionByNameResp) */
} SearchActionByNameResp;

/* Default values for struct fields */

/* Initializer values for message structs */
#define SearchActionByNameReq_init_default       {""}
#define SearchActionByNameResp_init_default      {"", "", 0, 0, ""}
#define SearchActionByNameReq_init_zero          {""}
#define SearchActionByNameResp_init_zero         {"", "", 0, 0, ""}

/* Field tags (for use in manual encoding/decoding) */
#define SearchActionByNameReq_name_tag           1
#define SearchActionByNameResp_action_id_tag     1
#define SearchActionByNameResp_action_name_tag   2
#define SearchActionByNameResp_execute_order_tag 3
#define SearchActionByNameResp_execute_time_tag  4
#define SearchActionByNameResp_arguments_tag     5

/* Struct field encoding specification for nanopb */
extern const pb_field_t SearchActionByNameReq_fields[2];
extern const pb_field_t SearchActionByNameResp_fields[6];

/* Maximum encoded size of messages (where known) */
#define SearchActionByNameReq_size               203
#define SearchActionByNameResp_size              631

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SEARCHACTIONBYNAME_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
